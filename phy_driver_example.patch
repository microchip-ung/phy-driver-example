diff --git a/vtss_api/mepa/CMakeLists.txt b/vtss_api/mepa/CMakeLists.txt
index 1c30e38..4af97c8 100644
--- a/vtss_api/mepa/CMakeLists.txt
+++ b/vtss_api/mepa/CMakeLists.txt
@@ -25,6 +25,7 @@ add_subdirectory(intel)
 add_subdirectory(ksz9031)
 add_subdirectory(microchip)
 add_subdirectory(vtss)
+add_subdirectory(example)
 
 
 ###############################################################################
@@ -78,8 +79,8 @@ MEPA_LIB(LIB_NAME mepa_sparx5_bringup ADVANCED
          DRVS     mepa_drv_vtss_10g_ts)
 
 MEPA_LIB(LIB_NAME mepa_lan966x ADVANCED
-         DEFS     -DMEPA_HAS_VTSS  -DMEPA_HAS_KSZ9031  -D MEPA_HAS_LAN8814 -DMEPA_HAS_LAN884x
-         DRVS     mepa_drv_vtss    mepa_drv_ksz9031    mepa_drv_lan8814   mepa_drv_lan884x)
+         DEFS     -DMEPA_HAS_VTSS  -DMEPA_HAS_KSZ9031  -D MEPA_HAS_LAN8814 -DMEPA_HAS_LAN884x -DMEPA_HAS_EXAMPLE
+         DRVS     mepa_drv_vtss    mepa_drv_ksz9031    mepa_drv_lan8814   mepa_drv_lan884x     mepa_drv_example)
 
 MEPA_LIB(LIB_NAME mepa_lmstax_lan966x ADVANCED
          DEFS     -DMEPA_HAS_LAN8814
diff --git a/vtss_api/mepa/common/include/mepa_driver.h b/vtss_api/mepa/common/include/mepa_driver.h
index 56ffaef..58781fe 100644
--- a/vtss_api/mepa/common/include/mepa_driver.h
+++ b/vtss_api/mepa/common/include/mepa_driver.h
@@ -803,5 +803,8 @@ mepa_drivers_t mepa_lan8770_driver_init();
 /** \brief Returns drivers for lan884x PHY */
 mepa_drivers_t mepa_lan884x_driver_init();
 
+/* Example PHY driver */
+mepa_drivers_t mepa_xxx_driver_init();
+
 #include <microchip/ethernet/hdr_end.h>
 #endif /**< _MICROCHIP_ETHERNET_PHY_API_PHY_DRV_H_ */
diff --git a/vtss_api/mepa/common/src/phy.c b/vtss_api/mepa/common/src/phy.c
index 18012c4..8f41a36 100644
--- a/vtss_api/mepa/common/src/phy.c
+++ b/vtss_api/mepa/common/src/phy.c
@@ -216,9 +216,13 @@ struct mepa_device *mepa_create(const mepa_callout_t    MEPA_SHARED_PTR *callout
 #if defined(MEPA_HAS_LAN884x)
         MEPA_phy_lib[8] = mepa_lan884x_driver_init();
 #endif
+#if defined(MEPA_HAS_EXAMPLE)
+	MEPA_phy_lib[9] = mepa_xxx_driver_init();
+#endif
+
         // Shall be last
 #if defined(MEPA_HAS_VTSS)
-        MEPA_phy_lib[9] = mepa_default_phy_driver_init();
+        MEPA_phy_lib[10] = mepa_default_phy_driver_init();
 #endif
     }
 
diff --git a/vtss_api/mepa/example/CMakeLists.txt b/vtss_api/mepa/example/CMakeLists.txt
new file mode 100644
index 0000000..a82aa5c
--- /dev/null
+++ b/vtss_api/mepa/example/CMakeLists.txt
@@ -0,0 +1,11 @@
+
+MEPA_DRV(LIB_NAME mepa_drv_example
+         SRCS     example_minimal.c
+         INCL_PUB ../../me/include ../include
+         INCL_PRI example)
+
+option(MEPA_example "Add example support in libmeba" OFF)
+if (${MEPA_example})
+    set(mepa_drvs ${mepa_drvs} mepa_drv_example CACHE INTERNAL "")
+    set(mepa_defs ${mepa_defs} -DMEPA_HAS_EXAMPLE CACHE INTERNAL "")
+endif()
diff --git a/vtss_api/mepa/example/example_minimal.c b/vtss_api/mepa/example/example_minimal.c
new file mode 100644
index 0000000..cfd99a5
--- /dev/null
+++ b/vtss_api/mepa/example/example_minimal.c
@@ -0,0 +1,106 @@
+// Copyright (c) 2004-2020 Microchip Technology Inc. and its subsidiaries.
+// SPDX-License-Identifier: MIT
+
+#include <microchip/ethernet/phy/api.h>
+#include <mepa_driver.h>
+
+#define ID1   0x123456
+#define MASK1 0x00ffff
+
+#define ID2   0x133456
+#define MASK2 0x0fffff
+
+
+// This structure can contain anything you need for this instance of this driver.
+// All PHY driver functions has the signiture yyy(mepa_device_t *dev,...) and
+// you get access to this structure with:
+//  phy_data_t* p = (phy_data_t*)dev->data;
+//
+typedef struct {
+  mepa_port_no_t  port_no; // May be usefull to have the port_no.
+  int some_usefull_data;
+} phy_data_t;
+
+
+// --- Constructor: Probe is the "constructor" for this driver "class".
+//
+static mepa_device_t *xxx_probe(mepa_driver_t *drv,
+				const mepa_callout_t    MEPA_SHARED_PTR *callout,
+				struct mepa_callout_ctx MEPA_SHARED_PTR *callout_ctx,
+				struct mepa_board_conf              *board_conf)
+{
+    mepa_device_t *dev;
+    phy_data_t *data;
+
+    printf("PHY driver example: xxx_probe() called; Just so you know.\n");
+
+    // --- Create an "object" of this driver "class".
+    //
+    dev = mepa_create_int(drv, callout, callout_ctx, board_conf, sizeof(phy_data_t));
+    if (!dev) return 0;
+
+    // --- Initialize the "private" date for this PHY object.
+    //
+    data = dev->data;
+    data->port_no = board_conf->numeric_handle;
+    data->some_usefull_data = 0;
+
+    //    T_I(MEPA_TRACE_GRP_GEN, "xxx driver probed for port %d", data->port_no);
+    return dev;
+}
+
+
+// --- Destructor
+//
+static mepa_rc xxx_delete(mepa_device_t *dev)
+{
+    return mepa_delete_int(dev);
+}
+
+
+
+// --- And here you can continue with implementing the PHY driver function you need.
+
+
+
+
+// --- Register function
+//     This function has to be listed in the mepa/common/src/phy.c::mepa_create()
+//
+mepa_drivers_t mepa_xxx_driver_init()
+{
+  // --- This is an example where logically two drivers are provided as identified by
+  //     (ID1,MASK1) and (ID2,MASK2)
+    static const int nr_drivers = 2;
+    static mepa_driver_t drivers[] = {
+        {
+	  .id   = ID1,
+	  .mask = MASK1,
+	  .mepa_driver_probe = xxx_probe,  // --- The probe function is mandatory to implement.
+	  .mepa_driver_delete = xxx_delete,
+	  //
+	  // --- See in mepa_driver_t for a list of all the function pointers that are possible
+	  //     It is in vtss_api/mepa/common/include/mepa_driver.h
+	  //
+	  //     All the functions poiters that are not listed are set to NULL.
+	  //     The interface to call these functions are in mepa/common/src/phy.c and here
+	  //     you can see, that if a function is not implemented (NULL), then calling it will
+	  //     return MESA_RC_NOT_IMPLEMENTED.
+	  //
+        },
+        {
+	  .id   = ID2,
+	  .mask = MASK2,
+	  .mepa_driver_probe = xxx_probe,
+	  .mepa_driver_delete = xxx_delete,
+        },
+    };
+
+    mepa_drivers_t result;
+    result.phy_drv = drivers;
+    result.count = nr_drivers;
+
+    printf("PHY driver example: mepa_xxx_driver_init() called; Just so you know.\n");
+
+    return result;
+}
